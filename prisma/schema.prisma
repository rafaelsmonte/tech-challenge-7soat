generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
  accountId String   @db.VarChar(256)
  order     Order[]

  @@map("customers")
}

model Category {
  id        Int          @id @default(autoincrement())
  createdAt DateTime     @default(now()) @db.Timestamptz(3)
  updatedAt DateTime     @updatedAt @db.Timestamptz(3)
  type      CategoryType @default(MEAL)
  product   Product[]

  @@map("categories")
}

model Product {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime @updatedAt @db.Timestamptz(3)
  name        String   @db.VarChar(256)
  price       Decimal  @db.Decimal(10, 2)
  description String   @db.VarChar(256)
  pictures    String[] @db.VarChar(256)
  categoryId  Int

  category      Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  orderProducts OrderProduct[]

  @@map("products")
}

model Order {
  id         Int         @id @default(autoincrement())
  paymentId  BigInt      @unique
  createdAt  DateTime    @default(now()) @db.Timestamptz(3)
  updatedAt  DateTime    @updatedAt @db.Timestamptz(3)
  customerId Int?
  totalPrice Decimal     @db.Decimal(10, 2)
  status     OrderStatus @default(AWAITING)
  notes      String      @default("")
  trackingId Int

  customer      Customer?      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  orderProducts OrderProduct[]

  @@map("orders")
}

model OrderProduct {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
  quantity  Int

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("orderProducts")
}

enum OrderStatus {
  PAYMENT_PENDING
  PAYMENT_FAILED
  AWAITING
  IN_PROGRESS
  DONE
  FINISHED
  CANCELLED
}

enum CategoryType {
  MEAL
  SIDE
  DRINK
  DESSERT
}
